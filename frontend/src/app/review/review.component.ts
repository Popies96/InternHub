import { Component, OnInit } from "@angular/core";
import { ReviewService } from "../services/review.service";
import { Review } from "../models/Review.model";
import { Router } from "@angular/router";
import { HttpClient, HttpHeaders } from "@angular/common/http";
import { jsPDF } from "jspdf"; // Import jsPDF

@Component({
  selector: "app-review",
  templateUrl: "./review.component.html",
  styleUrls: ["./review.component.css"]
})
export class ReviewComponent implements OnInit {
  reviews: Review[] = [];
  avatarUrl: string = '/assets/images/default-avatar.jpg';
  selectedInternshipId: number | null = null; // Initialize it with null
  recommendation: string = '';

  constructor(
    private reviewService: ReviewService,
    private router: Router,
    private http: HttpClient
  ) {}

  loadReviews(): void {
    this.reviewService.getAllReviews().subscribe((data) => {
      this.reviews = data;
    });
  }

  onDelete(id: number): void {
    if (confirm('Are you sure you want to delete this review?')) {
      this.reviewService.delete(id).subscribe(() => {
        this.reviews = this.reviews.filter((r) => r.id !== id);
      });
    }
  }

  onEdit(id: number): void {
    this.router.navigate(['/student/edit-review', id]);
  }

  userName: string = '';

  ngOnInit(): void {
    this.reviewService.getAllReviews().subscribe(
      (data: Review[]) => {
        console.log('Reviews:', data);
        this.reviews = data;
      },
      (error) => {
        console.error("Error fetching reviews:", error);
      }
    );

    const user = localStorage.getItem('user');
    if (user) {
      const userObj = JSON.parse(user);
      this.userName = userObj.username; // or userObj.fullName if available
    }
  }

  neatenCriteriaName(criteria: string): string {
    return criteria
      .toLowerCase()
      .split('_')
      .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
      .join(' ');
  }

  // Modal and recommendation handling
  showModal = false;
  internshipId!: number;

  openModal() {
    this.showModal = true;
    this.recommendation = '';
  }
  getReviewerName(review: Review): string {
    return review.reviewer?.username || review.reviewer?.fullName || 'Unknown';
  }
  closeModal() {
    this.showModal = false;
    this.internshipId = 0;
  }

  generateRecommendation(): void {
    if (!this.selectedInternshipId) {
      console.error('No internship ID selected');
      return;
    }

    this.reviewService.generateRecommendation(this.selectedInternshipId).subscribe({
      next: (response: string) => {
        console.log('Recommendation:', response);
        this.recommendation = response;
      },
      error: (err) => {
        console.error('Error generating recommendation:', err);
      }
    });
  }

  // Download recommendation as PDF using jsPDF
  downloadRecommendationAsPDF(): void {
    const doc = new jsPDF();

    // Header styling
    doc.setFont("helvetica", "bold");
    doc.setFontSize(18);
    doc.setTextColor(40, 40, 40);
    doc.text("AI Recommendation Report", 105, 20, { align: "center" });

    // Draw a line under title
    doc.setDrawColor(100);
    doc.line(10, 25, 200, 25);

    // Recommendation section
    doc.setFontSize(14);
    doc.setFont("helvetica", "normal");
    doc.setTextColor(60, 60, 60);
    doc.text("Recommendation:", 10, 40);

    // Multiline text
    doc.setFontSize(12);
    const splitText = doc.splitTextToSize(this.recommendation, 180);
    doc.text(splitText, 10, 50);

    // Footer
    doc.setFontSize(10);
    doc.setTextColor(150);
    doc.text("Generated by InternHub AI", 10, 280);

    // Save
    doc.save("recommendation.pdf");
  }

}
